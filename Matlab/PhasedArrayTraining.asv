%% Parameters:
clear

params = genParams();

M = params.M;
carrierFreq = params.carrierFreq;
c = params.c;
lambda = params.lambda;
d = params.d;
fs = params.fs;
T = params.T;
t = params.t;
N = params.N;
SNR = params.SNR;
SINR = params.SINR;
numInt = params.numInt;
intMode = params.intMode;
inputAngle = params.inputAngle;
interferenceAngle = params.interferenceAngle;

%% Simulate signals:
[SoI, SoA, noise] = simSignals(params);


%% Phased Array Flow

% create the phased array
ula_array = phased.ULA('NumElements',M,'ElementSpacing',d);

x = collectPlaneWave(ula_array, SoI, inputAngle, carrierFreq);
interference = collectPlaneWave(ula_array, SoA, interferenceAngle, carrierFreq);

rxInt = interference + noise;
rxSignal = x + rxInt;

%% Define objects:

% Define the MVDR beamformer
my_mvdrBeamFormer = myMVDRBeamformer(ula_array, inputAngle, carrierFreq);


mvdrBeamFormer = phased.MVDRBeamformer('SensorArray',ula_array,...
    'Direction',inputAngle,'OperatingFrequency',carrierFreq,...
    'WeightsOutputPort',true);

%% get y using beamformers:
[covMatrix , wMVDR] = my_mvdrBeamFormer.mvdrTrain(rxSignal, rxInt);
y = my_mvdrBeamFormer.mvdrBeamFormer(rxSignal, rxInt);


% MVDR:
% mvdrBeamFormer.TrainingInputPort = true;
% [yMVDR, wMVDR] = mvdrBeamFormer(rxSignal, rxInt);

% covMatrix = mvdrBeamFormer.CovarianceMatrix;


%% Find AoA:
[y,ang] = spatialspectrum(rxSignal);
plotSpectrum(spatialspectrum);




%% plots:
figure;
plot(t, abs(yMVDR))
hold on; plot(t, abs(yCbf))
legend('MVDR', 'Cbf')

figure;
pattern(ula_array,carrierFreq,-180:180,0,'Weights',wMVDR,'Type','directivity',...
    'PropagationSpeed',c,...
    'CoordinateSystem','rectangular');
axis([-90 90 -80 20]);

hold on;   % compare to PhaseShift
pattern(ula_array,carrierFreq,-180:180,0,'Weights',wCbf,...
    'PropagationSpeed',c,'Normalize',false,...
    'Type','powerdb','CoordinateSystem','rectangular');
hold off;
legend('MVDR','PhaseShift')